package barata.mps.databaseOperationsLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class DBCommands_Behavior {
  public static void init(SNode thisNode) {
  }
  public static List<SNode> call_getNonDupplicates_6352133620898804729(SNode thisNode) {
    final List<SNode> operations = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x24049aed5c4a4cc1L, 0x8e5cdbabbadbe5eeL, 0x58274fdf875fd81bL, 0x58274fdf875fd837L, "operations"))).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode it) {
        final Wrappers._boolean contains = new Wrappers._boolean(false);
        ListSequence.fromList(operations).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it2) {
            if (SPropertyOperations.hasValue(SLinkOperations.getTarget(it2, MetaAdapterFactory.getReferenceLink(0x24049aed5c4a4cc1L, 0x8e5cdbabbadbe5eeL, 0x58274fdf875ad2a1L, 0x58274fdf875b2b4cL, "object")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x24049aed5c4a4cc1L, 0x8e5cdbabbadbe5eeL, 0x58274fdf875ad2a1L, 0x58274fdf875b2b4cL, "object")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
              contains.value = true;
            }
          }
        });
        if (!(contains.value)) {
          ListSequence.fromList(operations).addElement(it);
        }
      }
    });
    return operations;
  }
}
