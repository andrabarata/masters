package barata.mps.rootLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class CheckForProperties_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public CheckForProperties_NonTypesystemRule() {
  }
  public void applyRule(final SNode daoPropertyMapper, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode conceptDeclaration = SNodeOperations.cast(SLinkOperations.getTargetNode(Sequence.fromIterable(SNodeOperations.getReferences(SNodeOperations.getParent(SNodeOperations.getParent(daoPropertyMapper)))).first()), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
    final List<String> names = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getPropertyDeclarations_1213877394546(conceptDeclaration)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (!(SPropertyOperations.hasValue(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "alias")) & !(SPropertyOperations.hasValue(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "shortDescription")) & !(SPropertyOperations.hasValue(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "virtualPackage"))) {
          ListSequence.fromList(names).addElement(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
        }
      }
    });
    Iterable<SNode> nodes = ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(daoPropertyMapper))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x2b84bc2a3ec14396L, 0x85f196fed8544c1dL, 0x25b0b61fcc325f03L, "barata.mps.rootLanguage.structure.DAOPropertyMapper"));
      }
    });
    final Iterable<String> definedNodes = Sequence.fromIterable(nodes).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x2b84bc2a3ec14396L, 0x85f196fed8544c1dL, 0x25b0b61fcc325f03L, "barata.mps.rootLanguage.structure.DAOPropertyMapper")), MetaAdapterFactory.getReferenceLink(0x2b84bc2a3ec14396L, 0x85f196fed8544c1dL, 0x25b0b61fcc325f03L, 0xd18d96e6d6a7e54L, "property")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
      }
    });
    if (!(Sequence.fromIterable(definedNodes).containsSequence(ListSequence.fromList(names)))) {
      final Wrappers._T<String> result = new Wrappers._T<String>("");
      ListSequence.fromList(names).visitAll(new IVisitor<String>() {
        public void visit(String it) {
          if (!(Sequence.fromIterable(definedNodes).contains(it))) {
            result.value += it + ", ";
          }
        }
      });
      result.value = result.value.substring(0, result.value.length() - 2);
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(daoPropertyMapper, "Mssing attributes: " + result.value, "r:58df0536-9817-431d-9791-f4f31853d432(barata.mps.rootLanguage.typesystem)", "7227310691963912212", null, errorTarget);
      }
    }
    final Wrappers._int dupplicate = new Wrappers._int(0);
    Sequence.fromIterable(nodes).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (SPropertyOperations.hasValue(SLinkOperations.getTarget(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x2b84bc2a3ec14396L, 0x85f196fed8544c1dL, 0x25b0b61fcc325f03L, "barata.mps.rootLanguage.structure.DAOPropertyMapper")), MetaAdapterFactory.getReferenceLink(0x2b84bc2a3ec14396L, 0x85f196fed8544c1dL, 0x25b0b61fcc325f03L, 0xd18d96e6d6a7e54L, "property")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(SLinkOperations.getTarget(daoPropertyMapper, MetaAdapterFactory.getReferenceLink(0x2b84bc2a3ec14396L, 0x85f196fed8544c1dL, 0x25b0b61fcc325f03L, 0xd18d96e6d6a7e54L, "property")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
          dupplicate.value++;
        }
      }
    });
    if (dupplicate.value > 1) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(daoPropertyMapper, "Dupplicate attribute detected", "r:58df0536-9817-431d-9791-f4f31853d432(barata.mps.rootLanguage.typesystem)", "7227310691964129261", null, errorTarget);
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("barata.mps.rootLanguage.typesystem.RemoveDupplicates_QuickFix", false);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
      }
    }
  }
  public String getApplicableConceptFQName() {
    return "barata.mps.rootLanguage.structure.DAOPropertyMapper";
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }
  public boolean overrides() {
    return false;
  }
}
